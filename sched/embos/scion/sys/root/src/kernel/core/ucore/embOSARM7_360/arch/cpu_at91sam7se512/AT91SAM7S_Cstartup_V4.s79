;*********************************************************************
;*                SEGGER MICROCONTROLLER SYSTEME GmbH                *
;*        Solutions for real time microcontroller applications       *
;*********************************************************************
;*                                                                   *
;*      (C) 2005    SEGGER Microcontroller Systeme GmbH              *
;*                  www.segger.com                                   *
;*                                                                   *
;*********************************************************************
;
;---------------------------------------------------------------------
;File   : AT91SAM7S_Cstartup_V4.c
;Purpose: startup file for AT91SAM7S CPUs and embOS
;-------- END-OF-HEADER ----------------------------------------------
;

;*********************************************************************
;*
;*      Configuration
;*
;*********************************************************************

#ifndef REMAP        
  #define REMAP 0             ; remap not supperted by current version
#endif

;*********************************************************************
;*
;*      Configuration check
;*
;*********************************************************************

#ifndef REMAP
  #error REMAP not defined
#endif

;*********************************************************************
;*
;*      Macros and definitions for the whole file
;*
;*********************************************************************

; Mode, correspords to bits 0-5 in CPSR
MODE_BITS   DEFINE  0x1F        ; Bit mask for mode bits in CPSR
USR_MODE    DEFINE  0x10        ; User mode
FIQ_MODE    DEFINE  0x11        ; Fast Interrupt Request mode
IRQ_MODE    DEFINE  0x12        ; Interrupt Request mode
SVC_MODE    DEFINE  0x13        ; Supervisor mode
ABT_MODE    DEFINE  0x17        ; Abort mode
UND_MODE    DEFINE  0x1B        ; Undefined Instruction mode
SYS_MODE    DEFINE  0x1F        ; System mode
    
;*********************************************************************
; ?RESET
; Reset Vector.
; Normally, segment INTVEC is linked at address 0.
; For debugging purposes, INTVEC may be placed at other
; addresses.
; A debugger that honors the entry point will start the
; program in a normal way even if INTVEC is not at address 0.
;*********************************************************************

        MODULE  ?RESET
        COMMON  INTVEC:CODE:NOROOT(2)
        PUBLIC  __program_start
        PUBLIC  __vector_end
        EXTERN  ?cstartup
        EXTERN  OS_IRQ_SERVICE
        CODE32  ; Always ARM mode after reset   

        org 0x00
__program_start
                     b   ?cstartup
undef_handler:       ldr pc,=undef_handler
swi_handler:         ldr pc,=swi_handler
prefetch_handler:    ldr pc,=prefetch_handler
data_handler:        ldr pc,=data_handler
        org 0x18
                     ldr pc,=OS_IRQ_SERVICE      ; embOS IRQ handler in RTOSVECT.asm
fiq_handler:         ldr pc,=fiq_handler

        ; Constant table entries (for ldr pc) will be placed at 0x20
        org 0x20
        LTORG

__vector_end:
        ENDMOD


;*********************************************************************
; ?CSTARTUP
;*********************************************************************
        MODULE  ?CSTARTUP

        RSEG    IRQ_STACK:DATA(2)
        RSEG    SVC_STACK:DATA:NOROOT(2)
        RSEG    CSTACK:DATA(2)
        RSEG    ICODE:CODE:NOROOT(2)
        PUBLIC  ?cstartup
        EXTERN  ?main
        EXTERN  OS_InitPLL  ; defined as "C" source in RTOSINIT

; Execution starts here.
; After a reset, the mode is ARM, Supervisor, interrupts disabled.

        CODE32
?cstartup

        EXTERN  ROMSTART, ROMEND, ROM_BASE_ADDR, RAM_BASE_ADDR, ROM_CODE_OFFSET 
        EXTERN  __program_start
        EXTERN  __vector_end


#if REMAP
  #error "REMAP not implemented in current version"
#endif  // REMAP

after_remap:

; Execute normal C startup code.

; Add initialization nedded before setup of stackpointers here

; Initialize the stack pointers.
; The pattern below can be used for any of the exception stacks:
; FIQ, IRQ, SVC, ABT, UND, SYS.
; The USR mode uses the same stack as SYS. 
; The stack segments must be defined in the linker command file,
; and be declared above.
        mrs     r0,cpsr                             ; Original PSR value
        bic     r0,r0,#MODE_BITS                    ; Clear the mode bits
        orr     r0,r0,#IRQ_MODE                     ; Set IRQ mode bits
        msr     cpsr_c,r0                           ; Change the mode
        ldr     sp,=SFE(IRQ_STACK) & 0xFFFFFFF8     ; End of IRQ_STACK

        bic     r0,r0,#MODE_BITS                    ; Clear the mode bits
        orr     r0,r0,#SYS_MODE                     ; Set System mode bits
        msr     cpsr_c,r0                           ; Change the mode
        ldr     sp,=SFE(CSTACK) & 0xFFFFFFF8        ; End of CSTACK

                
; Add more initialization here if required


; Copy INTVEC section from ROM to internal RAM
;       r0 = (int*) pSrc  
;       r1 = (int*) pDest ; Always 0x00 after remapping
;       r2 = len (32 bit words!)

        ldr     r0, = __program_start
        ldr     r1, = 0x00000        
        ldr     r2, = (__vector_end - __program_start)/4 ; Copy words   
copy_vector_loop:
        ldr     r3,[r0], #+4
        str     r3,[R1], #+4
        subs    r2,r2,#+0x1
        bne     copy_vector_loop

; Continue to ?main for more IAR specific system startup

        ldr     r0,=?main        
        bx      r0        
            
        LTORG
                            
; ********************************************************************

        ENDMOD

        END

; ***** EOF **********************************************************
