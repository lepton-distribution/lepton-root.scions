;*********************************************************************
;*                SEGGER MICROCONTROLLER SYSTEME GmbH                *
;*        Solutions for real time microcontroller applications       *
;*********************************************************************
;*                                                                   *
;*      (C) 2006    SEGGER Microcontroller Systeme GmbH              *
;*                  www.segger.com                                   *
;*                                                                   *
;*********************************************************************
;
;---------------------------------------------------------------------
;File   : AT91SAM9261_Cstartup_V4.c
;Purpose: startup file for AT91SAM9261 CPUs and embOS
;-------- END-OF-HEADER ----------------------------------------------
;

;*********************************************************************
;*
;*      Configuration
;*
;*********************************************************************

#ifndef REMAP        
  #define REMAP 0             ; remap not supperted by current version
#endif

;*********************************************************************
;*
;*      Configuration check
;*
;*********************************************************************

#ifndef REMAP
  #error REMAP not defined
#endif

;*********************************************************************
;*
;*      Macros and definitions for the whole file
;*
;*********************************************************************

; Mode, correspords to bits 0-5 in CPSR
MODE_BITS   DEFINE  0x1F        ; Bit mask for mode bits in CPSR
USR_MODE    DEFINE  0x10        ; User mode
FIQ_MODE    DEFINE  0x11        ; Fast Interrupt Request mode
IRQ_MODE    DEFINE  0x12        ; Interrupt Request mode
SVC_MODE    DEFINE  0x13        ; Supervisor mode
ABT_MODE    DEFINE  0x17        ; Abort mode
UND_MODE    DEFINE  0x1B        ; Undefined Instruction mode
SYS_MODE    DEFINE  0x1F        ; System mode
    
;*********************************************************************
; ?RESET
; Reset Vector.
; Normally, segment INTVEC is linked at address 0.
; For debugging purposes, INTVEC may be placed at other
; addresses.
; A debugger that honors the entry point will start the
; program in a normal way even if INTVEC is not at address 0.
;*********************************************************************

        MODULE  ?RESET
        RSEG    PROGRAM_END                ; Used to mark end of code for Bootloader
        COMMON  INTVEC:CODE:NOROOT(2)
        PUBLIC  __program_start
        PUBLIC  __vector_end
        EXTERN  ?cstartup
        ;EXTERN  OS_IRQ_SERVICE ;until embos 3.32
        EXTERN IRQ_Handler  ;embos 3.60d
        CODE32  ; Always ARM mode after reset   

        org 0x00
__program_start
                     b   ?cstartup
undef_handler:       ldr pc,=undef_handler
swi_handler:         ldr pc,=swi_handler
prefetch_handler:    ldr pc,=prefetch_handler
data_handler:        ldr pc,=data_handler

        org 0x14
        DCD          SFB(PROGRAM_END)            ; PROGRAM_END has to be located behind all code 
                                                 ; and const segments by linker
        org 0x18
                     ;ldr pc,=OS_IRQ_SERVICE      ; embOS IRQ handler in RTOSVECT.asm (until 3.32)
                     ldr pc,=IRQ_Handler          ; IRQ handler (3.60d)
fiq_handler:         ldr pc,=fiq_handler

        ; Constant table entries (for ldr pc) will be placed at 0x20
        org 0x20
        LTORG

__vector_end:
        ENDMOD

;*********************************************************************
; ?CSTARTUP
;*********************************************************************
        MODULE  ?CSTARTUP

        RSEG    IRQ_STACK:DATA(2)
        RSEG    SVC_STACK:DATA:NOROOT(2)
        RSEG    CSTACK:DATA(2)
        RSEG    ICODE:CODE:NOROOT(2)
        PUBLIC  ?cstartup
        EXTERN  ?main
        CODE32

; Execution starts here.
; After a reset, the mode is ARM, Supervisor, interrupts disabled.

?cstartup
        mrc     p15, 0, r0, c1, c0,0  ; read cp15 control register (cp15 r1) in r0
        ldr     r3, =0xC0001084       ; Reset bit :Cache disable, Little Endian end fast bus mode
        ldr     r4, =0x40004000       ; Set bit :Round Robin replacement
        bic     r0, r0, r3
        orr     r0, r0, r4
        mcr     p15, 0, r0, c1, c0,0  ; write r0 in cp15 control registre (cp15 r1)

; Execute normal C startup code.

; Add initialization nedded before setup of stackpointers here

; Initialize the stack pointers.
; The pattern below can be used for any of the exception stacks:
; FIQ, IRQ, SVC, ABT, UND, SYS.
; USR mode uses the same stack as SYS.
; The CPU MUST not be switched to USER mode, because embOS has to be able to switch stacks
; main() has to be started in SYS-mode
; embOS uses SVC mode for internal operation and switches to CSTACK when SVC mode is running.
; Therefore, an SVC stack does not need to be defined. 
; The stack segments must be defined in the linker command file,
; and be declared above.
 
;        Enable the following initialization code, if needed
;        mrs     r0,cpsr                             ; Original PSR value
;        bic     r0,r0,#MODE_BITS                    ; Clear the mode bits
;        orr     r0,r0,#UND_MODE                     ; Set UND mode bits
;        msr     cpsr_c,r0                           ; Change the mode
;        ldr     sp,=SFE(UND_STACK) & 0xFFFFFFF8     ; End of UND_STACK
;
;        bic     r0,r0,#MODE_BITS                    ; Clear the mode bits
;        orr     r0,r0,#ABT_MODE                     ; Set ABT mode bits
;        msr     cpsr_c,r0                           ; Change the mode
;        ldr     sp,=SFE(ABT_STACK) & 0xFFFFFFF8     ; End of ABT_STACK
;
;        bic     r0,r0,#MODE_BITS                    ; Clear the mode bits
;        orr     r0,r0,#FIQ_MODE                     ; Set FIQ mode bits
;        msr     cpsr_c,r0                           ; Change the mode
;        ldr     sp,=SFE(FIQ_STACK) & 0xFFFFFFF8     ; End of FIQ_STACK

        mrs     r0,cpsr                             ; Original PSR value
        bic     r0,r0,#MODE_BITS                    ; Clear the mode bits
        orr     r0,r0,#IRQ_MODE                     ; Set IRQ mode bits
        msr     cpsr_c,r0                           ; Change the mode
        ldr     sp,=SFE(IRQ_STACK) & 0xFFFFFFF8     ; End of IRQ_STACK

        bic     r0,r0,#MODE_BITS                    ; Clear the mode bits
        orr     r0,r0,#SYS_MODE                     ; Set System mode bits
        msr     cpsr_c,r0                           ; Change the mode
        ldr     sp,=SFE(CSTACK) & 0xFFFFFFF8        ; End of CSTACK

                
#ifdef __ARMVFP__
; Enable the VFP coprocessor.
                mov     r0, #0x40000000                 ; Set EN bit in VFP
                fmxr    fpexc, r0                       ; FPEXC, clear others.

; Disable underflow exceptions by setting flush to zero mode.
; For full IEEE 754 underflow compliance this code should be removed
; and the appropriate exception handler installed.
                mov     r0, #0x01000000             ; Set FZ bit in VFP
                fmxr    fpscr, r0                 ; FPSCR, clear others.
#endif

; Add more initialization here if required

; Continue to ?main for more IAR specific system startup

        ldr     r0,=?main        
        bx      r0        
            
        LTORG
                            
; ********************************************************************

        ENDMOD

        END

; ***** EOF **********************************************************
